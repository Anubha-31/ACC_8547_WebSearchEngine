














Analysis of Algorithms | Set 4 (Analysis of Loops) - GeeksforGeeks


















































Skip to content








































Tutorials



Practice DS & Algo.



DSA Topic-wise

DSA Company-wise

Algorithms



Analysis of Algorithms



Asymptotic Analysis

Worst, Average and Best Cases

Asymptotic Notations

Little o and little omega notations

Lower and Upper Bound Theory

Analysis of Loops

Solving Recurrences

Amortized Analysis

What does 'Space Complexity' mean ?

Pseudo-polynomial Algorithms

Polynomial Time Approximation Scheme

A Time Complexity Question

Searching Algorithms

Sorting Algorithms

Graph Algorithms

Pattern Searching

Geometric Algorithms

Mathematical

Randomized Algorithms

Greedy Algorithms

Dynamic Programming

Divide and Conquer

Backtracking

Branch and Bound

All Algorithms

Data Structures



Arrays

Linked List

Stack

Queue

Binary Tree

Binary Search Tree

Heap

Hashing

Graph

Advanced Data Structure

Matrix

Strings

All Data Structures

Interview Corner



Company Preparation

Top Topics

Practice Company Questions

Interview Experiences

Experienced Interviews

Internship Interviews

Competititve Programming

Design Patterns

System Design Tutorial

Multiple Choice Quizzes

Languages



C

C++

Java

Python

C#

JavaScript

jQuery

SQL

PHP

Scala

Perl

Go Language

HTML

CSS

Kotlin

ISRO CS



ISRO CS Solved Papers

ISRO CS Original Papers and Official Keys

ISRO CS Syllabus for Scientist/Engineer Exam

GATE



GATE Computer Science Notes

Last Minute Notes

GATE CS Solved Papers

GATE CS Original Papers and Official Keys

GATE 2021 Dates

GATE CS 2021 Syllabus

Important Topics for GATE CS

CS Subjects



Mathematics

Operating System

DBMS

Computer Networks

Computer Organization and Architecture

Theory of Computation

Compiler Design

Digital Logic

Software Engineering

Web Technologies



HTML

CSS

JavaScript

AngularJS

ReactJS

NodeJS

Bootstrap

jQuery

PHP

School Learning



School Programming

Mathematics



Algebra

Trigonometry

Statistics

Probability

Geometry

Mensuration

Calculus

Maths Notes (Class 8-11)



Class 8 Notes

Class 9 Notes

Class 10 Notes

Class 11 Notes

NCERT Solutions



Class 8 Maths Solution

Class 9 Maths Solution

Class 10 Maths Solution

Class 11 Maths Solution

Class 12 Maths Solution

RD Sharma Solutions



Class 8 Maths Solution

Class 9 Maths Solution

Class 10 Maths Solution

Class 11 Maths Solution

Class 12 Maths Solution

UGC NET CS



UGC NET CS Notes Paper II

UGC NET CS Notes Paper III

UGC NET CS Solved Papers

Student



Campus Ambassador Program

School Ambassador Program

Project

Geek of the Month

Campus Geek of the Month

Placement Course

Competititve Programming

Testimonials

Geek on the Top

Careers

Internship

Jobs



Apply for Jobs

Post a Job

Courses
















Write
Come write articles for us and get featured




Practice
Learn and code with the best industry experts




Premium
Get access to ad-free content, doubt assistance and more!




Jobs
Come and find your dream job with us




Geeks Digest

Quizzes

Geeks Campus


Gblog Articles

IDE

Campus Mantri










Home

Courses



GBlog

Puzzles

What's New ?





Change Language






Related Articles




?






Related Articles



Analysis of Algorithms | Set 2 (Worst, Average and Best Cases)

Analysis of Algorithms | Set 3 (Asymptotic Notations)


Analysis of Algorithms | Set 4 (Analysis of Loops)

Analysis of Algorithm | Set 4 (Solving Recurrences)

Analysis of Algorithm | Set 5 (Amortized Analysis Introduction)

What does ‘Space Complexity’ mean?

Pseudo-polynomial Algorithms

NP-Completeness | Set 1 (Introduction)

A Time Complexity Question

Merge Sort

QuickSort

HeapSort

Binary Heap

Time Complexity of building a heap

Applications of Heap Data Structure

Binomial Heap

Fibonacci Heap | Set 1 (Introduction)

Fibonacci Heap – Insertion and Union

Fibonacci Heap – Deletion, Extract min and Decrease key

Leftist Tree / Leftist Heap

K-ary Heap

Iterative HeapSort

Analysis of Algorithms | Set 1 (Asymptotic Analysis)

Understanding Time Complexity with Simple Examples

Complexity of different operations in Binary tree, Binary Search Tree and AVL tree

Practice Questions on Time Complexity Analysis








Improve Article



Analysis of Algorithms | Set 4 (Analysis of Loops)




Difficulty Level :

Easy

Last Updated :
08 May, 2019

We have discussed , and in previous posts. In this post, analysis of iterative programs with simple examples is discussed.
Asymptotic Analysis
Worst, Average and Best Cases
Asymptotic Notations
Time complexity of a function (or set of statements) is considered as O(1) if it doesn’t contain loop, recursion and call to any other non-constant time function.
1) O(1):
// set of non-recursive and non-loop statements
For example has O(1) time complexity. A loop or recursion that runs a constant number of times is also considered as O(1). For example the following loop is O(1).
swap() function

// Here c is a constant   
   for (int i = 1; i <= c; i++) {  
        // some O(1) expressions
   }
Time Complexity of a loop is considered as O(n) if the loop variables is incremented / decremented by a constant amount. For example following functions have O(n) time complexity.
2) O(n):
// Here c is a positive integer constant   
   for (int i = 1; i <= n; i += c) {  
        // some O(1) expressions
   }

   for (int i = n; i > 0; i -= c) {
        // some O(1) expressions
   }
: Time complexity of nested loops is equal to the number of times the innermost statement is executed. For example the following sample loops have O(n) time complexity
3) O(n)
c
2





for (int i = 1; i <=n; i += c) {
       for (int j = 1; j <=n; j += c) {
          // some O(1) expressions
       }
   }

   for (int i = n; i > 0; i -= c) {
       for (int j = i+1; j <=n; j += c) {
          // some O(1) expressions
   }
For example and have O(n) time complexity. Time Complexity of a loop is considered as O(Logn) if the loop variables is divided / multiplied by a constant amount.
Selection sort
Insertion Sort
2

4) O(Logn)
for (int i = 1; i <=n; i *= c) {
       // some O(1) expressions
   }
   for (int i = n; i > 0; i /= c) {
       // some O(1) expressions
   }
For example has O(Logn) time complexity. Let us see mathematically how it is O(Log n). The series that we get in first loop is 1, c, c, c, … c. If we put k equals to Logn, we get c which is n. Time Complexity of a loop is considered as O(LogLogn) if the loop variables is reduced / increased exponentially by a constant amount.
Binary Search(refer iterative implementation)
2
3
k
c
Logn
c

5) O(LogLogn)
// Here c is a constant greater than 1   
   for (int i = 2; i <=n; i = pow(i, c)) { 
       // some O(1) expressions
   }
   //Here fun is sqrt or cuberoot or any other constant root
   for (int i = n; i > 1; i = fun(i)) { 
       // some O(1) expressions
   }
See for mathematical details. When there are consecutive loops, we calculate time complexity as sum of time complexities of individual loops.
this

How to combine time complexities of consecutive loops?

for (int i = 1; i <=m; i += c) {  
        // some O(1) expressions
   }
   for (int i = 1; i <=n; i += c) {
        // some O(1) expressions
   }
   Time complexity of above code is O(m) + O(n) which is O(m+n)
   If m == n, the time complexity becomes O(2n) which is O(n).
As discussed , worst case time complexity is the most useful among best, average and worst. Therefore we need to consider worst case. We evaluate the situation when values in if-else conditions cause maximum number of statements to be executed. For example consider the where we consider the case when element is present at the end or not present at all. When the code is too complex to consider all if-else cases, we can get an upper bound by ignoring if else and other complex control statements. Time complexity of a recursive function can be written as a mathematical recurrence relation. To calculate time complexity, we must know how to solve recurrences. We will soon be discussing recurrence solving techniques as a separate post.
How to calculate time complexity when there are many if, else statements inside loops?

here

linear search function


How to calculate time complexity of recursive functions?


Quiz on Analysis of Algorithms
Next –
Analysis of Algorithm | Set 4 (Solving Recurrences)
Please write comments if you find anything incorrect, or you want to share more information about the topic discussed above.
Attention reader! Don’t stop learning now. Get hold of all the important DSA concepts with the at a student-friendly price and become industry ready. To complete your preparation from learning a language to DS Algo and many more, please refer

DSA Self Paced Course

Complete Interview Preparation Course
.
In case you wish to attend with experts, please refer and .
live classes

DSA Live Classes for Working Professionals

Competitive Programming Live for Students


My Personal Notes

arrow_drop_up




Save





Like





Previous

Analysis of Algorithms | Set 3 (Asymptotic Notations)


Next


Analysis of Algorithm | Set 4 (Solving Recurrences)




Recommended Articles

Page :








Analysis of Algorithms | Set 1 (Asymptotic Analysis)
03, Jan 12



Analysis of Algorithms | Big-O analysis
28, Feb 18



Analysis of Algorithm | Set 5 (Amortized Analysis Introduction)
23, Sep 14



Analysis of Algorithms | Set 2 (Worst, Average and Best Cases)
19, Feb 12





Analysis of Algorithms | Set 3 (Asymptotic Notations)
26, Oct 13



Analysis of Algorithms | Set 5 (Practice Problems)
02, May 17



Algorithms Sample Questions | Set 3 | Time Order Analysis
27, May 19



Performance of loops (A caching question)
30, Aug 15





Asymptotic Analysis and comparison of sorting algorithms
28, Dec 16



Analysis of algorithms | little o and little omega notations
14, Aug 17



Analysis of Algorithms | Big - ? (Big Theta) Notation
11, Jul 21



Analysis of Algorithms | Big - ? (Big- Omega) Notation
11, Jul 21





Analysis of Algorithm | Set 4 (Solving Recurrences)
13, Feb 14



Practice Questions on Time Complexity Analysis
12, Dec 17



Time Complexity Analysis | Tower Of Hanoi (Recursion)
27, Feb 18



Amortized analysis for increment in counter
23, Mar 18





Complexity Analysis of Binary Search
29, May 19



Complexity analysis of various operations of Binary Min Heap
26, Jun 20



Examples of Big-O analysis
23, Nov 20



What is algorithm and why analysis of it is important?
12, Jan 21





Analysis of different sorting techniques
29, Jan 18



Difference between Posteriori and Priori analysis
07, Aug 19



Guidelines for asymptotic analysis
27, May 21



Prune-and-Search | A Complexity Analysis Overview
19, Jul 21





Article Contributed By :






GeeksforGeeks

Vote for difficulty
Current difficulty :
Easy


Easy
Normal
Medium
Hard
Expert



Article Tags :


Analysis

Articles



Report Issue









What's New








Competitive Programming Live Classes for Students

View Details








DSA Self Paced Course

View Details








DSA Live Classes for Working Professionals

View Details









Most popular in Analysis




Analysis of different sorting techniques

Cyclomatic Complexity

Analysis of Algorithms | Big-O analysis

Analysis of Algorithms | Set 5 (Practice Problems)

Time complexities of different data structures









Most visited in Articles




Must Do Coding Questions for Companies like Amazon, Microsoft, Adobe, ...

Tree Traversals (Inorder, Preorder and Postorder)

find command in Linux with examples

Practice for cracking any coding interview

SQL | Join (Inner, Left, Right and Full Joins)










Writing code in comment? Please use , generate link and share the link here.
ide.geeksforgeeks.org


Load Comments






×














































5th Floor, A-118, Sector-136, Noida, Uttar Pradesh - 201305



feedback@geeksforgeeks.org













Company

About Us

Careers

Privacy Policy

Contact Us

Copyright Policy

Learn

Algorithms

Data Structures

Languages

CS Subjects

Video Tutorials

Practice

Courses

Company-wise

Topic-wise

How to begin?

Contribute

Write an Article

Write Interview Experience

Internships

Videos


@geeksforgeeks
,
Some rights reserved






We use cookies to ensure you have the best browsing experience on our website. By using our site, you acknowledge that you have read and understood our &

Cookie Policy

Privacy Policy
Got It !







